
package com.lariflix.jemm.forms;

import com.lariflix.jemm.dtos.JellyfinInstanceDetails;
import com.lariflix.jemm.core.ConnectJellyfinAPI;
import com.lariflix.jemm.dtos.JellyfinItem;
import com.lariflix.jemm.dtos.JellyfinItems;
import com.lariflix.jemm.dtos.JellyfinFolder;
import com.lariflix.jemm.dtos.JellyfinFolderMetadata;
import com.lariflix.jemm.dtos.JellyfinGenreItem;
import com.lariflix.jemm.dtos.JellyfinPeopleItem;
import com.lariflix.jemm.dtos.JellyfinStudioItem;
import com.lariflix.jemm.reports.JellyfinReportEngine;
import com.lariflix.jemm.utils.JellyfimParameters;
import com.lariflix.jemm.utils.JellyfinReportTypes;
import com.lariflix.jemm.utils.JellyfinUtilFunctions;
import com.lariflix.jemm.utils.TransformDateFormat;
import java.awt.Component;
import java.awt.Cursor;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.json.simple.parser.ParseException;
import java.awt.Desktop;
import java.net.URI;
import java.net.URISyntaxException;

/**
 * MainWindow is a class that extends JFrame and represents the main window of the application.
 * This window is used to display the Jellyfin items and folders to the user.
 * 
 * The class contains methods to connect to the Jellyfin API, parse the response, and display the items and folders.
 * 
 * @author Cesar Bianchi
 * @see JellyfinInstanceDetails
 * @see ConnectJellyfinAPI
 * @see JellyfinItem
 * @see JellyfinItems
 * @see JellyfinFolder
 * @see JellyfinFolderMetadata
 * @see JellyfinGenreItem
 * @see JellyfinPeopleItem
 * @see JellyfinStudioItem
 * @see JellyfinUtilFunctions
 * @see TransformDateFormat
 */
public class MainWindow extends javax.swing.JFrame {

    static JellyfinInstanceDetails instanceData = new JellyfinInstanceDetails();
    static ConnectJellyfinAPI connectAPI = new ConnectJellyfinAPI();
    static DefaultListModel<String> modelList = new DefaultListModel<>();
    
    static String sortNameOldValue = new String();
    static String forcedSortNameOldValue = new String();
    public final int from_folder_tab = 1;
    public final int from_content_tab = 2;
    private final int JUST_FOLDER_ITEM = 1;
    private final int FOLDER_AND_CONTENT = 2;
    private final int JUST_CONTENT_ITEM = 3;
    
    private final int DOWNLOADING_DATA = 1;
    private final int UPLOADING_DATA = 2;
    
    /**
     * Constructs a new MainWindow.
     * This constructor initializes the components of the window.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * Sets the instance data and updates the base URL and API token in the ConnectAPI.
     * This method sets the instance data to the given JellyfinInstanceDetails, and updates the base URL and API token in the ConnectAPI with the base URL and API token from the given JellyfinInstanceDetails.
     * 
     * @param instData The JellyfinInstanceDetails to be set.
     * @author Cesar Bianchi
     * @since 1.0
     * @see JellyfinInstanceDetails
     */
    public void setInstanceData(JellyfinInstanceDetails instData){
        this.instanceData = instData;
        connectAPI.setcBaseURL(instanceData.getCredentials().getBaseURL());
        connectAPI.setcTokenApi(instanceData.getCredentials().getTokenAPI());
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem14 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItem14.setText("jMenuItem14");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JEMM - Jellyfin Easy Metadata Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Library Folders"));

        jList2.setModel(modelList);
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Details of Folder"));

        jLabel1.setText("ID:");

        jTextField1.setEditable(false);
        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Title:");

        jLabel3.setText("Created Date:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Sort Name:");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel7.setText("Forced Sort Name:");

        jLabel8.setText("Premiere Date:");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel9.setText("Path:");

        jTextField9.setEditable(false);
        jTextField9.setEnabled(false);
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jLabel10.setText("Overview:");

        jLabel11.setText("Custom Rating:");

        jLabel12.setText("Official Rating:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton5.setText("-");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setText("+");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Type", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("People", jPanel6);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable2);

        jButton6.setText("-");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("+");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Genres", jPanel7);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable3);

        jButton10.setText("-");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("+");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Studios", jPanel8);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "TagName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable4);

        jButton8.setText("-");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("+");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Tags", jPanel9);

        jCheckBox1.setText("Same of Title");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });
        jCheckBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox1KeyPressed(evt);
            }
        });

        jCheckBox2.setText("Same of Title");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });
        jCheckBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox2KeyPressed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BR-L", "BR-10", "BR-12", "BR-14", "BR-16", "BR-18" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BR-L", "BR-10", "BR-12", "BR-14", "BR-16", "BR-18" }));

        jButton22.setText("Refresh Folders");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Search Folder");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Apply for Folder and Content");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Apply for Folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Folder Metadata", jPanel3);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Original Title", "Sort Name", "Created Date", "Premiere Date", "Preferred Metadata Language", "Preferred Metadata Country Code", "Critic Rating", "Community Rating", "Official Rating", "Custom Rating", "Production Year", "Path", "Overview"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable5);

        jTabbedPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Content Details"));

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTable6);

        jButton12.setText("-");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("+");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        jTabbedPane3.addTab("People", jPanel10);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTable7);

        jButton14.setText("-");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("+");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        jTabbedPane3.addTab("Genres", jPanel11);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTable8);

        jButton16.setText("-");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("+");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        jTabbedPane3.addTab("Studios", jPanel12);

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "TagName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTable9);

        jButton18.setText("-");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("+");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 908, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(214, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        jTabbedPane3.addTab("Tags", jPanel13);

        jButton20.setText("Apply Changes");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("Exit");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTabbedPane3))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton21)
                    .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane3.getAccessibleContext().setAccessibleName("People");

        jTabbedPane1.addTab("Folder Content", jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Folder Metadata");

        jMenu1.setText("Main");

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem12.setText("Refresh Folders and Itens");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem17.setText("Search Item");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem17);
        jMenu1.add(jSeparator1);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reports");

        jMenu4.setText("Inventory");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Basic");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Full");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenu2.add(jMenu4);

        jMenu5.setText("Genres");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setText("Basic");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setText("Full");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        jMenu2.add(jMenu5);

        jMenu6.setText("People");
        jMenu6.setToolTipText("");

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setText("Basic");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem9.setText("Full");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenu2.add(jMenu6);

        jMenu9.setText("Studios");

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem16.setText("Basic");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem16);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem15.setText("Full");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem15);

        jMenu2.add(jMenu9);

        jMenu7.setText("Tags");

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_9, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem10.setText("Basic");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem11.setText("Full");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem11);

        jMenu2.add(jMenu7);

        jMenu8.setText("Year");

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem13.setText("Full");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem13);

        jMenu2.add(jMenu8);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.setToolTipText("");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Source Code");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("About JEMM");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if (this.checkAllMandatoryFieldsIsOk()){
                this.saveFolder();
            }    
        } catch (java.text.ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            if (this.checkAllMandatoryFieldsIsOk()){
                this.saveFolder();
                this.saveContent(true);
            }
        } catch (java.text.ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        this.setFieldsValues();
    }//GEN-LAST:event_jList2ValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.addPeople(from_folder_tab);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.delPeople(from_folder_tab);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.delGenre(from_folder_tab);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        this.addGenre(from_folder_tab);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        this.delTag(from_folder_tab);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.addTag(from_folder_tab);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        this.delStudio(from_folder_tab);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        this.addStudio(from_folder_tab);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        this.delPeople(from_content_tab);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
         this.delGenre(from_content_tab);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        this.addGenre(from_content_tab);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        this.delStudio(from_content_tab);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        this.addStudio(from_content_tab);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        this.delTag(from_content_tab);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        this.addTag(from_content_tab);
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        try {
            if (this.checkAllMandatoryFieldsIsOk()){
                this.saveContent(false);
            }
        } catch (java.text.ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton21ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            this.loadFolders();
        } catch (IOException | ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
        this.setContentChilds();
    }//GEN-LAST:event_jTable5MouseClicked

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        this.sortNameSameOfTitle();
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jCheckBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox1KeyPressed
        this.sortNameSameOfTitle();
    }//GEN-LAST:event_jCheckBox1KeyPressed

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        this.forcedNameSameOfTitle();
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jCheckBox2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox2KeyPressed
        this.forcedNameSameOfTitle();
    }//GEN-LAST:event_jCheckBox2KeyPressed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        this.addPeople(from_content_tab);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.INVENTORY_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(10000);
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        // Inventory Basic Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.INVENTORY_BASIC,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(3000);
        }

        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Would you like exit JEMM?","Are you sure ?",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            this.dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        
        // Genres Basic Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.GENRES_BASIC,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(2000);
        }
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // Genres Full Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.GENRES_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(20000);
        }

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // People Basic Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.PEOPLE_BASIC,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(3000);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // People Full Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.PEOPLE_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(20000);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // Tags Basic Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.TAGS_BASIC,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(10000);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // Tags FULL Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.TAGS_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(10000);
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(new URI("https://github.com/CesarBianchi/JellyfinEasyMetadataManager"));              
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex); 
            } catch (URISyntaxException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        this.reloadFolderItems();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // Studios Basic Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.STUDIOS_BASIC,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(3000);
        }
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // Studios Full Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.STUDIOS_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(10000);
        }
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // Years Full Report Menu Item
        WaitingWindow waitWindow = new WaitingWindow(instanceData.getCredentials().getBaseURL(),1 );
        
        JellyfinReportEngine reportEng = new JellyfinReportEngine(JellyfinReportTypes.YEARS_FULL,instanceData);
        reportEng.start();
        
        while (!reportEng.isDone()){
            waitWindow.showDialogWithTimmer(20000);
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        this.reloadFolderItems();
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        this.searchFolderItem();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        this.searchFolderItem();
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        AboutJemmWindow aboutWindow = new AboutJemmWindow();
        aboutWindow.show();
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    /**
     * Loads the folders from the Jellyfin API and updates the instance data and the list model.
     * This method retrieves the users, admin user, and folders from the Jellyfin API and sets them in the instance data. It then updates the list model with the names of the folders.
     * 
     * @throws IOException If an I/O error occurs.
     * @throws MalformedURLException If a URL is malformed.
     * @throws ParseException If an error occurs while parsing.
     * @author Cesar Bianchi
     * @since 1.0
     * @see ConnectAPI#getUsers()
     * @see ConnectAPI#getAdminUser()
     * @see ConnectAPI#getFolders()
     * @see JellyfinFolder     
     */
    private void loadFolders() throws IOException, MalformedURLException, ParseException {
        //Folders Type
        JellyfimParameters tpFolder = JellyfimParameters.FOLDERS_AND_SUBFOLDERS;

        //Load Users From Jellyfin API
        instanceData.setUsers(connectAPI.getUsers());
        
        //Load Admin User from Jellyfin API
        instanceData.setAdminUser(connectAPI.getAdminUser());
        
        //Load Folders From Jellyfin API
        instanceData.setFolders(connectAPI.getFolders(tpFolder));
        
        //Set jList itens from instanceObject
        JellyfinFolder newFolder = new JellyfinFolder();
        String prefix = new String();
        
        for (int nI = 0; nI < instanceData.getFolders().getItems().size(); nI++){
            newFolder = instanceData.getFolders().getItems().get(nI);
            
            if (newFolder.getName().contains("⎆")){
                prefix = "";
            } else {
                prefix = Integer.toString(nI+1).concat(" - ");
            }
            
            modelList.addElement(prefix.concat(newFolder.getName()) );
        }
        this.selectFirstFolder();
        
    }

    /**
     * Selects the first folder in the list if it exists and sets the field values accordingly.
     * This method checks if the list model has at least one item. If it does, it sets the selected index to 0 and calls the setFieldsValues method to update the field values based on the selected item.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     * @see #setFieldsValues()
     */
    private void selectFirstFolder() {
        if (jList2.getModel().getSize() > 0){
            jList2.setSelectedIndex(0);
            this.setFieldsValues();
        }
    }
    
    /**
     * Sets the field values based on the selected item in the list.
     * This method displays a waiting window and sets the cursor to the waiting cursor. It then calls the setFieldsValuesBackground method to load the fields and grids. After the fields and grids are loaded, it sets the cursor back to the default cursor.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    public void setFieldsValues() {
        
        try {
            //Waitng Dialog and mouse cursor waiting
            /*  Commented by the Issue #27
            WaitingWindow waitWin = new WaitingWindow(instanceData.getCredentials().getBaseURL(),DOWNLOADING_DATA);
            waitWin.showDialogWithTimmer();
            */
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            //Load jFields and Grids
            this.setFieldsValuesBackground();

            this.setCursor(Cursor.getDefaultCursor());
            
        } catch (java.text.ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } 
        

    }
    
    /**
     * Sets the field values in the background based on the selected item in the list.
     * This method retrieves the selected item from the list and requests the metadata and content items for the selected folder from the Jellyfin API. It then updates the instance data with the retrieved metadata and content items, and refreshes the GUI objects based on the instance data.
     * 
     * @throws ParseException If an error occurs while parsing.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setFieldsValuesBackground() throws java.text.ParseException {
        //get Selected jList item
        int nIndex = jList2.getSelectedIndex();
        
        if (nIndex >= 0 ) {
            
            String cFolderId = instanceData.getFolders().getItems().get(nIndex).getId();

            //1 - Request Metadata for Selected Folder
            JellyfinFolderMetadata folderMetadadta = null;        
            try {
                
                //2 - Request Folder Metadata
                folderMetadadta = connectAPI.getFolderMetadata(cFolderId);

                //2.1 - Add folder metadata atributes to main instance object
                instanceData.getFolders().getItems().get(nIndex).setMetadata(folderMetadadta);

                //3 - Request Folder Content Items 
                JellyfinItems folderItems = new JellyfinItems();
                folderItems = connectAPI.getItems(cFolderId);

                //4 - Add Folder Content Item to main instance object
                instanceData.getFolders().getItems().get(nIndex).setFolderContent(folderItems);
                
                //5 - Refresh GUI Objects from Instance Obj
                this.setFolderGUIFromInstObj(cFolderId);
                

            } catch (IOException | ParseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * Sets all the field values based on the given JellyfinFolderMetadata.
     * This method sets the text of the fields to the corresponding properties of the given JellyfinFolderMetadata. The date fields are converted to Brazilian date format before being set.
     * 
     * @param folderMetadata The JellyfinFolderMetadata to be used.
     * @throws ParseException If an error occurs while parsing the dates.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAlljFields(JellyfinFolderMetadata folderMetadata) throws java.text.ParseException {
        
        //All "Header" Fields
        jTextField1.setText(folderMetadata.getId());
        jTextField2.setText(folderMetadata.getName());
        jTextField9.setText(folderMetadata.getPath());
        jTextField6.setText(folderMetadata.getSortName());
        jTextField7.setText(folderMetadata.getForcedSortName());
        
        jTextField3.setText(this.toBrazilianDate(folderMetadata.getDateCreated()));
        jTextField8.setText(this.toBrazilianDate(folderMetadata.getPremiereDate()));
        
        jTextArea1.setText(folderMetadata.getOverview());
    }

    /**
     * Sets all the rows in the people table based on the given JellyfinFolderMetadata.
     * This method creates a new JellyfinPeopleItem and a new model for the jTable1. It then clears the model and adds a row for each person in the given JellyfinFolderMetadata. Each row contains the id, name, type, and role of the person. After all the rows have been added, it sets the model of jTable1 to the new model and resizes the table width columns.
     * 
     * @param folderMetadata The JellyfinFolderMetadata to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAllPeopleRows(JellyfinFolderMetadata folderMetadata) {
        JellyfinPeopleItem people = new JellyfinPeopleItem();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        //Clean Grid before load again
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        for (int nI = 0; nI < folderMetadata.getPeople().size();nI++){
            
            people = folderMetadata.getPeople().get(nI);
            Object[] row = { people.getId(), people.getName(), people.getType(), people.getRole() };
            model.addRow(row);
            
        }
        jTable1.setModel(model);
        
        //Resize table width columns
        this.resizeTableWidthColumns(jTable1);
        
    }

    /**
     * Sets all the rows in the genres table based on the given JellyfinFolderMetadata.
     * This method creates a new JellyfinGenreItem and a new model for the jTable2. It then clears the model and adds a row for each genre in the given JellyfinFolderMetadata. Each row contains the id and name of the genre. After all the rows have been added, it sets the model of jTable2 to the new model and resizes the table width columns.
     * 
     * @param folderMetadata The JellyfinFolderMetadata to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAllGenresRows(JellyfinFolderMetadata folderMetadata) {
        JellyfinGenreItem genre = new JellyfinGenreItem();
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
       
        //Clean Grid before load again
        model = new JellyfinUtilFunctions().eraseModel(model);
                
        for (int nI = 0; nI < folderMetadata.getGenreItems().size(); nI++){
            genre = folderMetadata.getGenreItems().get(nI);
            
            Object[] row = { genre.getId(), genre.getName() };
            model.addRow(row);
        }
        jTable2.setModel(model);
        
        //Resize table width columns
        this.resizeTableWidthColumns(jTable2);
        
    }

    /**
     * Sets all the rows in the studios table based on the given JellyfinFolderMetadata.
     * This method creates a new JellyfinStudioItem and a new model for the jTable3. It then clears the model and adds a row for each studio in the given JellyfinFolderMetadata. Each row contains the id and name of the studio. After all the rows have been added, it sets the model of jTable3 to the new model and resizes the table width columns.
     * 
     * @param folderMetadata The JellyfinFolderMetadata to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAllStudioRows(JellyfinFolderMetadata folderMetadata) {
        JellyfinStudioItem studio = new JellyfinStudioItem();
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        
        //Clean Grid before load again
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        for (int nI = 0; nI < folderMetadata.getStudios().size(); nI++){
            studio = folderMetadata.getStudios().get(nI);
            
            Object[] row = { studio.getId(), studio.getName() };
            model.addRow(row);
        }
        jTable3.setModel(model);
        
        //Resize table width columns
        this.resizeTableWidthColumns(jTable3);
    }

    /**
     * Sets all the rows in the tags table based on the given JellyfinFolderMetadata.
     * This method creates a new String for the tag and a new model for the jTable4. It then clears the model and adds a row for each tag in the given JellyfinFolderMetadata. Each row contains the tag. After all the rows have been added, it sets the model of jTable4 to the new model and resizes the table width columns.
     * 
     * @param folderMetadata The JellyfinFolderMetadata to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAllTagsRows(JellyfinFolderMetadata folderMetadata) {
        String tag = new String();
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        
        //Clean Grid before load again
        model = new JellyfinUtilFunctions().eraseModel(model);       
        
        for (int nI = 0; nI < folderMetadata.getTags().size(); nI++){
            tag = folderMetadata.getTags().get(nI);
            
            Object[] row = { tag };
            model.addRow(row);
        }
        jTable4.setModel(model);
        //Resize table width columns
        this.resizeTableWidthColumns(jTable4);
    }
    
    /**
     * Sets all the rows in the folder content table based on the given JellyfinItems.
     * This method creates a new JellyfinItem and a new model for the jTable5. It then clears the model and adds a row for each item in the given JellyfinItems. Each row contains the id, metadata, and other details of the item. After all the rows have been added, it sets the model of jTable5 to the new model and resizes the table width columns.
     * 
     * @param folderItems The JellyfinItems to be used.
     * @throws ParseException If an error occurs while parsing the dates.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setAllFolderContent(JellyfinItems folderItems) throws java.text.ParseException {
        JellyfinItem item = new JellyfinItem();
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        
        //Clean Grid before load again
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        for (int nI = 0; nI < folderItems.getItems().size(); nI++){
            item = folderItems.getItems().get(nI);
            
            Object[] row = { item.getId(),
                                item.getItemMetadata().getName(), 
                                item.getItemMetadata().getSortName(),
                                item.getItemMetadata().getOriginalTitle(),
                                this.toBrazilianDate(item.getItemMetadata().getDateCreated()),
                                this.toBrazilianDate(item.getItemMetadata().getPremiereDate()),
                                item.getItemMetadata().getPreferredMetadataLanguage(),
                                item.getItemMetadata().getPreferredMetadataCountryCode(),
                                item.getItemMetadata().getCriticRating(),
                                item.getItemMetadata().getCommunityRating(),
                                item.getItemMetadata().getOfficialRating(),
                                item.getItemMetadata().getCustomRating(),
                                item.getItemMetadata().getProductionYear(),
                                item.getItemMetadata().getPath(),
                                item.getItemMetadata().getOverview()};
            model.addRow(row);
        }
        jTable5.setModel(model);
        
        //Resize table width columns
        this.resizeTableWidthColumns(jTable5);
        
    }
    
    /**
     * Resizes the width of all columns in the given JTable based on the content of the cells.
     * This method retrieves the TableColumnModel of the given JTable and iterates over all columns. For each column, it calculates the maximum width of the cells in the column and sets the preferred width of the column to this value. If the calculated width is less than 100, it sets the preferred width to 100. After all columns have been resized, it sets the auto resize mode of the table to AUTO_RESIZE_OFF.
     * 
     * @param table The JTable to be resized.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void resizeTableWidthColumns(JTable table) {
        //Resize Table Columns (Width)
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +5 , width);
            }
            
            if(width < 100)
                width=100;
        
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        table.setAutoResizeMode(table.AUTO_RESIZE_OFF);
    }

    /**
     * Converts the given Date to a string in Brazilian date format.
     * This method checks if the given Date is not null. If it is not null, it creates a new SimpleDateFormat with the pattern "dd/MM/yyyy" and formats the Date to a string using this SimpleDateFormat. It then returns the formatted string. If the given Date is null, it returns an empty string.
     * 
     * @param date The Date to be converted.
     * @return The Date as a string in Brazilian date format, or an empty string if the Date is null.
     * @throws ParseException If an error occurs while formatting the Date.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private String toBrazilianDate(Date date) throws java.text.ParseException {
        String cBrazilianFormatDate = new String();
        
        if (date != null){
            
            DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            cBrazilianFormatDate = formatter.format(date);
            
        }
        
        return cBrazilianFormatDate;
    }

    /**
     * Sets the content of the child elements based on the selected item in the folder and content lists.
     * This method retrieves the selected item from the folder list and the content list. It then retrieves the people, genres, studios, and tags of the selected content item and sets the people, genres, studios, and tags grids to these values.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setContentChilds() {
        int nFolderSelectedItem = jList2.getSelectedIndex();
        int nContentSelectedItem = jTable5.getSelectedRow();
        
        //Set the People Grid
        ArrayList<JellyfinPeopleItem> people = instanceData.getFolders().getItems().get(nFolderSelectedItem).getFolderContent().getItems().get(nContentSelectedItem).getItemMetadata().getPeople();
        this.setContentPeople(people);
      
        //Set the Genre Grid
        ArrayList<JellyfinGenreItem> genres = instanceData.getFolders().getItems().get(nFolderSelectedItem).getFolderContent().getItems().get(nContentSelectedItem).getItemMetadata().getGenreItems();
        this.setContentGenres(genres);
        
        //Set the Studios Grid
        ArrayList<JellyfinStudioItem> studios = instanceData.getFolders().getItems().get(nFolderSelectedItem).getFolderContent().getItems().get(nContentSelectedItem).getItemMetadata().getStudios();
        this.setContetStudios(studios);
        
        //Set the Tags Grid
        ArrayList<String> tags = instanceData.getFolders().getItems().get(nFolderSelectedItem).getFolderContent().getItems().get(nContentSelectedItem).getItemMetadata().getTags();
        this.setContentTags(tags);
        
        
    }

    /**
     * Sets the rows in the people table based on the given ArrayList of JellyfinPeopleItem.
     * This method creates a new DefaultTableModel for the jTable6 and clears it. It then adds a row for each JellyfinPeopleItem in the given ArrayList. Each row contains the id, name, type, and role of the JellyfinPeopleItem. After all the rows have been added, it sets the model of jTable6 to the new model and resizes the table width columns.
     * 
     * @param people The ArrayList of JellyfinPeopleItem to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setContentPeople(ArrayList<JellyfinPeopleItem> people) {
        //Erase Grid
        DefaultTableModel model = (DefaultTableModel) jTable6.getModel();
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        //Set new rows
        for (int nI = 0; nI < people.size(); nI++ ){
            Object[] row = { people.get(nI).getId(), people.get(nI).getName(), people.get(nI).getType(), people.get(nI).getRole() };
            model.addRow(row);
        }
        jTable6.setModel(model);
        
        //Resize all sub-grids width columns
        this.resizeTableWidthColumns(jTable6);
        
    }

    /**
     * Sets the rows in the genres table based on the given ArrayList of JellyfinGenreItem.
     * This method creates a new DefaultTableModel for the jTable7 and clears it. It then adds a row for each JellyfinGenreItem in the given ArrayList. Each row contains the id and name of the JellyfinGenreItem. After all the rows have been added, it sets the model of jTable7 to the new model and resizes the table width columns.
     * 
     * @param genres The ArrayList of JellyfinGenreItem to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setContentGenres(ArrayList<JellyfinGenreItem> genres) {
        //Erase Grid
        DefaultTableModel model = (DefaultTableModel) jTable7.getModel();
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        //Set new rows
        for (int nI = 0; nI < genres.size(); nI++ ){
            Object[] row = { genres.get(nI).getId(), genres.get(nI).getName() };
            model.addRow(row);
        }
        jTable7.setModel(model);        
        this.resizeTableWidthColumns(jTable7);

    }

    /**
     * Sets the rows in the studios table based on the given ArrayList of JellyfinStudioItem.
     * This method creates a new DefaultTableModel for the jTable8 and clears it. It then adds a row for each JellyfinStudioItem in the given ArrayList. Each row contains the id and name of the JellyfinStudioItem. After all the rows have been added, it sets the model of jTable8 to the new model and resizes the table width columns.
     * 
     * @param studios The ArrayList of JellyfinStudioItem to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setContetStudios(ArrayList<JellyfinStudioItem> studios) {
        //Erase Grid
        DefaultTableModel model = (DefaultTableModel) jTable8.getModel();
        model = new JellyfinUtilFunctions().eraseModel(model);       
        
        //Set new rows
        for (int nI = 0; nI < studios.size(); nI++ ){
            Object[] row = { studios.get(nI).getId(), studios.get(nI).getName() };
            model.addRow(row);
        }
        jTable8.setModel(model);
        this.resizeTableWidthColumns(jTable8);
        
    }

    /**
     * Sets the rows in the tags table based on the given ArrayList of Strings.
     * This method creates a new DefaultTableModel for the jTable9 and clears it. It then adds a row for each String in the given ArrayList. Each row contains the tag. After all the rows have been added, it sets the model of jTable9 to the new model and resizes the table width columns.
     * 
     * @param tags The ArrayList of Strings to be used.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void setContentTags(ArrayList<String> tags) {
        //Erase Grid
        DefaultTableModel model = (DefaultTableModel) jTable9.getModel();
        model = new JellyfinUtilFunctions().eraseModel(model);
        
        //Set new rows
        for (int nI = 0; nI < tags.size(); nI++ ){
            Object[] row = { tags.get(nI) };
            model.addRow(row);
        }
        jTable9.setModel(model);
        this.resizeTableWidthColumns(jTable9);
    }

    /**
     * Adds a new person to the people grid or the people content grid.
     * This method shows a dialog to the user to define the new person. If the name of the new person is not empty, it adds a new row to the people grid or the people content grid, depending on the value of nFrom. The new row contains the id, name, type, and role of the new person. After the new row has been added, it resizes the width of the columns in the grid.
     * 
     * @param nFrom The tab from which the method was called. If it is from_folder_tab, the new person is added to the people grid. If it is from_content_tab, the new person is added to the people content grid.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void addPeople(int nFrom) {

        //Show a Dialog to User Define the new People
        JellyfinPeopleItem newPeopleInserted = new JellyfinPeopleItem();
        AddPeopleWindow newPeopleForm = new AddPeopleWindow(connectAPI);
        newPeopleInserted = newPeopleForm.showDialog();
        
        //Add new People on People Grid or People Content Grid
        if (nFrom == from_folder_tab) {
            if (!newPeopleInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();        
                Object[] row = { newPeopleInserted.getId(), newPeopleInserted.getName(), newPeopleInserted.getType(), newPeopleInserted.getRole() };
                model.addRow(row);
                jTable1.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable1);
            }
        } else if (nFrom == from_content_tab) {
            if (!newPeopleInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable6.getModel();        
                Object[] row = { newPeopleInserted.getId(), newPeopleInserted.getName(), newPeopleInserted.getType(), newPeopleInserted.getRole() };
                model.addRow(row);
                jTable6.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable6);
            }
        }
    }

    /**
     * If the checkbox jCheckBox1 is selected, sets the text of jTextField6 to the text of jTextField2 and disables jTextField6. If the checkbox is not selected, sets the text of jTextField6 back to its old value and enables jTextField6.
     * This method is used to ensure that the sort name is the same as the title when the checkbox is selected.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void sortNameSameOfTitle() {
        //
        
        if (jCheckBox1.isSelected()){
            
            sortNameOldValue = jTextField6.getText();
            jTextField6.setText(jTextField2.getText());
            jTextField6.setEnabled(false);
        } else {
            jTextField6.setText(sortNameOldValue);
            jTextField6.setEnabled(true);
        }
        
    }

    /**
     * If the checkbox jCheckBox2 is selected, sets the text of jTextField7 to the text of jTextField2 and disables jTextField7. If the checkbox is not selected, sets the text of jTextField7 back to its old value and enables jTextField7.
     * This method is used to ensure that the forced sort name is the same as the title when the checkbox is selected.
     * 
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void forcedNameSameOfTitle() {
        //forcedSortNameOldValue
        
        if (jCheckBox2.isSelected()){
            
            forcedSortNameOldValue = jTextField7.getText();
            jTextField7.setText(jTextField2.getText());
            jTextField7.setEnabled(false);
        } else {
            jTextField7.setText(forcedSortNameOldValue);
            jTextField7.setEnabled(true);
        }
        
    }

    /**
     * Removes a person from the people grid or the people content grid.
     * This method retrieves the selected row from the people grid or the people content grid, depending on the value of nOpc. 
     * If a row is selected, it shows a confirmation dialog to the user. If the user confirms, it removes the selected row from the grid and resizes the width of the columns in the grid.
     * 
     * @param nOpc The tab from which the method was called. If it is from_folder_tab, the person is removed from the people grid. If it is from_content_tab, the person is removed from the people content grid.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void delPeople(int nOpc) {
        
        String cPeople = new String();
        String cItemID = new String();
        String cItemName = new String();
        int nRow = -1; 
        
        if (nOpc == from_folder_tab ){
            
            nRow = jTable1.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the People name and Item Name
                cPeople = jTable1.getModel().getValueAt(nRow,1).toString();
                cItemID = jTextField1.getText();
                cItemName = jTextField2.getText();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cPeople).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();  
                    model.removeRow(nRow);
                    jTable1.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable1);
                }
            }    
            
        } else if (nOpc == from_content_tab){
            nRow = jTable6.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the People name and Item Name
                cPeople = jTable6.getModel().getValueAt(nRow,1).toString();
                cItemID = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),0).toString();
                cItemName = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),1).toString();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cPeople).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable6.getModel();  
                    model.removeRow(nRow);
                    jTable6.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable6);
                }
            }   
            
        }    
        
    }

    /**
     * Adds a new genre to the genre grid or the genre content grid.
     * This method shows a dialog to the user to define the new genre. If the name of the new genre is not empty, it adds a new row to the genre grid or the genre content grid, depending on the value of nFrom. The new row contains the id and name of the new genre. After the new row has been added, it resizes the width of the columns in the grid.
     * 
     * @param nFrom The tab from which the method was called. If it is from_folder_tab, the new genre is added to the genre grid. If it is from_content_tab, the new genre is added to the genre content grid.
     * @author Cesar Bianchi
     * @since 1.0
     
     */
    private void addGenre(int nFrom) {
        //Show a Dialog to User Define the new Genre
        JellyfinGenreItem newGenreInserted = new JellyfinGenreItem();
        AddGenreWindow newGenreForm = new AddGenreWindow(connectAPI);
        newGenreInserted = newGenreForm.showDialog();
        
        //Add new Genre on Genre Grid or Genre Content Grid
        if (nFrom == from_folder_tab) {
            if (! newGenreInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();        
                Object[] row = { newGenreInserted.getId(), newGenreInserted.getName() };
                model.addRow(row);
                jTable2.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable2);
            }
        } else if (nFrom == from_content_tab) {
            if (!newGenreInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable7.getModel();        
                Object[] row = { newGenreInserted.getId(), newGenreInserted.getName() };
                model.addRow(row);
                jTable7.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable7);
            }
        }
    }

    /**
     * This method is used to remove a genre from a specific table.
     * @param nOpc An integer that determines from which table the genre will be removed.
     * If nOpc is equal to from_folder_tab, the genre will be removed from the jTable2.
     * If nOpc is equal to from_content_tab, the genre will be removed from the jTable7.
     * @autor Cesar Bianchi
     * @since 1.0
     */
    private void delGenre(int nOpc) {
            
        String cGenre = new String();
        String cItemID = new String();
        String cItemName = new String();
        int nRow = -1; 
        
        if (nOpc == from_folder_tab ){
            
            nRow = jTable2.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Genre name and Item Name
                cGenre = jTable2.getModel().getValueAt(nRow,1).toString();
                cItemID = jTextField1.getText();
                cItemName = jTextField2.getText();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cGenre).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();  
                    model.removeRow(nRow);
                    jTable2.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable2);
                }
            }    
            
        } else if (nOpc == from_content_tab){
            nRow = jTable7.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Genre name and Item Name
                cGenre = jTable7.getModel().getValueAt(nRow,1).toString();
                cItemID = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),0).toString();
                cItemName = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),1).toString();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cGenre).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable7.getModel();  
                    model.removeRow(nRow);
                    jTable7.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable7);
                }
            }   
            
        }    
    }
    
    /**
     * This method is used to add a new studio to a specific table.
     * @param nFrom An integer that determines in which table the new studio will be added.
     * If nFrom is equal to from_folder_tab, the studio will be added to the jTable3.
     * If nFrom is equal to from_content_tab, the studio will be added to the jTable8.
     * @autor Cesar Bianchi
     * @since 1.0
     */
    private void addStudio(int nFrom) {
        //Show a Dialog to User Define the new Studio
        JellyfinStudioItem newStudioInserted = new JellyfinStudioItem();
        AddStudioWindow newStudioForm = new AddStudioWindow(connectAPI);
        newStudioInserted = newStudioForm.showDialog();
        
        //Add new Studio on Genre Grid or Studio Content Grid
        if (nFrom == from_folder_tab) {
            if (! newStudioInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable3.getModel();        
                Object[] row = { newStudioInserted.getId(), newStudioInserted.getName() };
                model.addRow(row);
                jTable3.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable3);
            }
        } else if (nFrom == from_content_tab) {
            if (!newStudioInserted.getName().trim().isEmpty()){
                DefaultTableModel model = (DefaultTableModel) jTable8.getModel();        
                Object[] row = { newStudioInserted.getId(), newStudioInserted.getName() };
                model.addRow(row);
                jTable8.setModel(model);

                //Resize all sub-grids width columns
                this.resizeTableWidthColumns(jTable8);
            }
        }
    }

    /**
     * This method is used to remove a studio from a specific table.
     * @param nOpc An integer that determines from which table the studio will be removed.
     * If nOpc is equal to from_folder_tab, the studio will be removed from the jTable3.
     * If nOpc is equal to from_content_tab, the studio will be removed from the jTable8.
     * @autor Cesar Bianchi
     * @since 1.0
     */
    private void delStudio(int nOpc) {
            
        String cStudio = new String();
        String cItemID = new String();
        String cItemName = new String();
        int nRow = -1; 
        
        if (nOpc == from_folder_tab ){
            
            nRow = jTable3.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Studio name and Item Name
                cStudio = jTable3.getModel().getValueAt(nRow,1).toString();
                cItemID = jTextField1.getText();
                cItemName = jTextField2.getText();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cStudio).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable3.getModel();  
                    model.removeRow(nRow);
                    jTable3.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable3);
                }
            }    
            
        } else if (nOpc == from_content_tab){
            nRow = jTable8.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Studio name and Item Name
                cStudio = jTable8.getModel().getValueAt(nRow,1).toString();
                cItemID = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),0).toString();
                cItemName = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),1).toString();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cStudio).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable8.getModel();  
                    model.removeRow(nRow);
                    jTable8.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable8);
                }
            }   
            
        }    
    }
    
    /**
     * This method is used to add a new tag to a specific table.
     * @param nFrom An integer that determines in which table the new tag will be added.
     * If nFrom is equal to from_folder_tab, the tag will be added to the jTable4.
     * If nFrom is equal to from_content_tab, the tag will be added to the jTable9.
     * @autor Cesar Bianchi
     * @since 1.0
     */
    private void addTag(int nFrom) {
        //Show a Dialog to User Define the new Tag
        String newTagInserted = new String();
        AddTagWindow newTagForm = new AddTagWindow();
        newTagInserted = newTagForm.showDialog();
        
        //Add new Tag on Tag Grid or Tag Content Grid
        if (!newTagInserted.isEmpty()){
        
            if (nFrom == from_folder_tab) {
                if (! newTagInserted.trim().isEmpty()){
                    DefaultTableModel model = (DefaultTableModel) jTable4.getModel();        
                    Object[] row = { newTagInserted };
                    model.addRow(row);
                    jTable4.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable4);
                }
            } else if (nFrom == from_content_tab) {
                if (!newTagInserted.trim().isEmpty()){
                    DefaultTableModel model = (DefaultTableModel) jTable9.getModel();        
                    Object[] row = { newTagInserted };
                    model.addRow(row);
                    jTable9.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable9);
                }
            }
        }
    }

    /**
     * This method is used to remove a tag from a specific table.
     * @param nOpc An integer that determines from which table the tag will be removed.
     * If nOpc is equal to from_folder_tab, the tag will be removed from the jTable4.
     * If nOpc is equal to from_content_tab, the tag will be removed from the jTable9.
     * @autor Cesar Bianchi
     * @since 1.0
     */
    private void delTag(int nOpc) {
            
        String cTagName = new String();
        String cItemID = new String();
        String cItemName = new String();
        int nRow = -1; 
        
        if (nOpc == from_folder_tab ){
            
            nRow = jTable4.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Tag name and Item Name
                cTagName = jTable4.getModel().getValueAt(nRow,0).toString();
                cItemID = jTextField1.getText();
                cItemName = jTextField2.getText();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cTagName).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable4.getModel();  
                    model.removeRow(nRow);
                    jTable4.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable3);
                }
            }    
            
        } else if (nOpc == from_content_tab){
            nRow = jTable9.getSelectedRow();
            
            if (nRow >= 0){ 
                //Get the Studio name and Item Name
                cTagName = jTable9.getModel().getValueAt(nRow,0).toString();
                cItemID = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),0).toString();
                cItemName = jTable5.getModel().getValueAt(jTable5.getSelectedRow(),1).toString();

                if (JOptionPane.showConfirmDialog(null, "Are you sure remove ".concat(cTagName).concat(" from ").concat(cItemName).concat(" ?"), "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    DefaultTableModel model = (DefaultTableModel) jTable9.getModel();  
                    model.removeRow(nRow);
                    jTable9.setModel(model);

                    //Resize all sub-grids width columns
                    this.resizeTableWidthColumns(jTable9);
                }
            }   
            
        }    
    }

    /**
     * This method is used to save the folder after checking all mandatory fields.
     * It updates the values in the main object from GUI Objects and posts updates on the Jellyfin instance.
     * 
     * @throws java.text.ParseException If parsing the date fails.
     * @autor Cesar Bianchi
     * @see checkAllMandatoryFieldsIsOk()
     * @since 1.0
     */
    private void saveFolder() throws java.text.ParseException {
        if (this.checkAllMandatoryFieldsIsOk()){        
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            //Update values in main object, from GUI Objects
            this.setFolderInstObjFromGUI(jList2.getSelectedIndex());
            
            //Post Updates on Jellyfin instance
            try {
                /* Commented by the Issue #27
                WaitingWindow waitWin = new WaitingWindow(instanceData.getCredentials().getBaseURL(),UPLOADING_DATA);
                waitWin.showDialogWithTimmer();  
                */
                
                String folderID = instanceData.getFolders().getItems().get(jList2.getSelectedIndex()).getId();
                connectAPI.postUpdate(folderID, "", instanceData, JUST_FOLDER_ITEM);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            this.setCursor(Cursor.getDefaultCursor());
        }
    }
    
    /**
     * This method is used to save the content after checking all mandatory fields.
     * It updates the values in the main object from GUI Objects and posts updates on the Jellyfin instance.
     * 
     * @param lAll A boolean that determines whether all content should be saved.
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     */
    private void saveContent(boolean lAll) throws java.text.ParseException {
        
        if (this.checkAllMandatoryFieldsIsOk()){ 
            int folderIndex = jList2.getSelectedIndex();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.setFolderItemsInstObjFromGUI(folderIndex,lAll);


            //Post Updates on Jellyfin instance
            try {

                for (int nI = 0; nI < instanceData.getFolders().getItems().get(folderIndex).getFolderContent().getItems().size(); nI++ ){
                    String cFolderID = instanceData.getFolders().getItems().get(jList2.getSelectedIndex()).getId();
                    String cItemID = instanceData.getFolders().getItems().get(jList2.getSelectedIndex()).getFolderContent().getItems().get(nI).getId();
                    
                    /*Commented by the Issue #27
                    WaitingWindow waitWin = new WaitingWindow(instanceData.getCredentials().getBaseURL(),UPLOADING_DATA);
                    waitWin.showDialogWithTimmer();  
                    */
                    
                    connectAPI.postUpdate(cFolderID, cItemID, instanceData, JUST_CONTENT_ITEM);                
                }

            } catch (IOException | ParseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.setCursor(Cursor.getDefaultCursor());
        }
    }

    /**
     * This method is used to set the GUI from the instance object for a specific folder.
     * It retrieves the metadata and folder items from the main instance object and updates the GUI accordingly.
     * 
     * @param cFolderID A string that represents the ID of the folder.
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     */
    private void setFolderGUIFromInstObj(String cFolderID) throws java.text.ParseException {
        
        //Get metadata object from Instance Main Object
        JellyfinFolderMetadata folderMetadata = new JellyfinFolderMetadata();
        JellyfinItems folderItems = new JellyfinItems();
        for (int nI = 0; nI < instanceData.getFolders().getItems().size(); nI++){
            if (cFolderID.equals(instanceData.getFolders().getItems().get(nI).getId())){
                folderMetadata = instanceData.getFolders().getItems().get(nI).getMetadata();
                folderItems = instanceData.getFolders().getItems().get(nI).getFolderContent();
            }
        }
        
        //UnSelect options "Same of Title" on right side
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jTextField6.setEnabled(true);
        jTextField7.setEnabled(true);
        sortNameOldValue = "";
        forcedSortNameOldValue = "";

        //2.1 - Set the content of jFields
        //instanceData

        this.setAlljFields(folderMetadata);

        //2.1 - Set the content of People Grid/
        this.setAllPeopleRows(folderMetadata);

        //2.1 - Set the content of Genres
        this.setAllGenresRows(folderMetadata);

        //2.1 - Set the content of Studio Grid
        this.setAllStudioRows(folderMetadata);

        //2.1 - Set the content of Tags Grid
        this.setAllTagsRows(folderMetadata);

        //4.1 Set the content of "Folder Content Main Grid"
        this.setAllFolderContent(folderItems); 
    }

    /**
     * This method is used to set the instance object from the GUI for a specific folder.
     * It retrieves the data from the GUI and updates the instance object accordingly.
     * 
     * @param nIndex An integer that represents the index of the folder in the instance object.
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     */
    private void setFolderInstObjFromGUI(int nIndex) throws java.text.ParseException {
        
        TransformDateFormat transforDate = new TransformDateFormat();
        
        int productionYear = Integer.parseInt(jTextField8.getText().trim().substring(6,10));
        
        
        instanceData.getFolders().getItems().get(nIndex).setName(jTextField2.getText().trim());
        instanceData.getFolders().getItems().get(nIndex).setPremiereDate(transforDate.getFullDateFromSimple(jTextField8.getText().trim()));        
        instanceData.getFolders().getItems().get(nIndex).setCriticRating(10);
        instanceData.getFolders().getItems().get(nIndex).setCommunityRating(10);        
        instanceData.getFolders().getItems().get(nIndex).setProductionYear(productionYear);
        
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setName(jTextField2.getText().trim());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setSortName(jTextField6.getText().trim());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setForcedSortName(jTextField7.getText().trim());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setDateCreated(transforDate.getFullDateFromSimple(jTextField8.getText().trim()));
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setPremiereDate(transforDate.getFullDateFromSimple(jTextField8.getText().trim()));
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setCanDownload(false);
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setPreferredMetadataLanguage("pt-br");
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setPreferredMetadataCountryCode("BR");
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setOfficialRating(jComboBox2.getSelectedItem().toString());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setCustomRating(jComboBox1.getSelectedItem().toString());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setOverview(jTextArea1.getText().trim());
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setCommunityRating(10);
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setProductionYear(productionYear);
        
        //1 - Add People
        //1.1 - Clean existing People
        ArrayList<JellyfinPeopleItem> peopleEmpty = new ArrayList();
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setPeople(peopleEmpty);
        
        //1.2 - Add all people present in People Grid
        ArrayList<JellyfinPeopleItem> newGroupPeople = new ArrayList();        
        for (int nI = 0; nI < jTable1.getModel().getRowCount(); nI++){
            JellyfinPeopleItem newPeople = new JellyfinPeopleItem();
            newPeople.setId(jTable1.getModel().getValueAt(nI, 0).toString());
            newPeople.setName(jTable1.getModel().getValueAt(nI, 1).toString());
            newPeople.setType(jTable1.getModel().getValueAt(nI, 2).toString());
            newPeople.setRole(jTable1.getModel().getValueAt(nI, 3).toString());            
            newGroupPeople.add(newPeople);            
        }
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setPeople(newGroupPeople);
        
        
        //2 - Add Genres
        //2.1 - Clean existing Genres
        ArrayList<JellyfinGenreItem> genreEmpty = new ArrayList();
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setGenreItems(genreEmpty);
        
        //2.2 - Add all Genres present in Genres Grid
        ArrayList<JellyfinGenreItem> newGenres = new ArrayList();        
        for (int nI = 0; nI < jTable2.getModel().getRowCount(); nI++){
            JellyfinGenreItem newGenre = new JellyfinGenreItem();
            newGenre.setId(jTable2.getModel().getValueAt(nI, 0).toString());
            newGenre.setName(jTable2.getModel().getValueAt(nI, 1).toString());            
            newGenres.add(newGenre);            
        }
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setGenreItems(newGenres);
                
        //3 - Add Studios
        //3.1 - Clean existing Studios
        ArrayList<JellyfinStudioItem> studiosEmpty = new ArrayList();
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setStudios(studiosEmpty);
        
        //3.2 - Add all Studios present in Studios Grid
        ArrayList<JellyfinStudioItem> newStudios = new ArrayList();        
        for (int nI = 0; nI < jTable3.getModel().getRowCount(); nI++){
            JellyfinStudioItem newStudio = new JellyfinStudioItem();
            newStudio.setId(jTable3.getModel().getValueAt(nI, 0).toString());
            newStudio.setName(jTable3.getModel().getValueAt(nI, 1).toString());            
            newStudios.add(newStudio);            
        }
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setStudios(newStudios);
        
        //4 - Add Tags
        //4.1 - Clean existing Tags
        ArrayList<String> emptyTags = new ArrayList();
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setTags(emptyTags);
        
        //4.2 - Add all Tags present in Tags Grid
        ArrayList<String> newTags = new ArrayList();        
        for (int nI = 0; nI < jTable4.getModel().getRowCount(); nI++){
            String newTag = new String();
            newTag = jTable4.getModel().getValueAt(nI, 0).toString();            
            newTags.add(newTag);            
        }
        instanceData.getFolders().getItems().get(nIndex).getMetadata().setTags(newTags);
        
    }
    
    /**
     * This method is used to set the instance object from the GUI for a specific folder's items.
     * It retrieves the data from the GUI and updates the instance object accordingly.
     * 
     * @param nIndex An integer that represents the index of the folder in the instance object.
     * @param lUpdateFromFolder A boolean that determines whether the content should be updated from the folder.
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     * @see TransformDateFormat#getFullDateFromSimple(String)
     * @see JellyfinPeopleItem
     * @see JellyfinGenreItem
     * @see JellyfinStudioItem
     */
    private void setFolderItemsInstObjFromGUI(int nIndex, boolean lUpdateFromFolder) throws java.text.ParseException {
        int nSize = jTable5.getModel().getRowCount();
        TransformDateFormat transforDate = new TransformDateFormat();
         
        //For each item present in Content Grid, add in Instance Object
        for (int nI = 0;nI < nSize; nI++){
            
            String cID1 = instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().getId();
            String cID2 = jTable5.getModel().getValueAt(nI, 0).toString();
            
            if (cID1.equals(cID2)){
                
                if (lUpdateFromFolder){
                    this.replaceItensContentFromFolder();
                }
                
                //Name
                String cName = jTable5.getModel().getValueAt(nI, 1).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setName(cName);

                //Original Title
                String cOriginalTitle = jTable5.getModel().getValueAt(nI, 2).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setOriginalTitle(cOriginalTitle);

                //Sort Name
                String cSortName = jTable5.getModel().getValueAt(nI, 3).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setSortName(cSortName);

                //Sort Name
                Date createdDate = transforDate.getFullDateFromSimple(jTable5.getModel().getValueAt(nI, 4).toString());
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setDateCreated(createdDate);

                //Premiere Date
                Date premiereDate = transforDate.getFullDateFromSimple(jTable5.getModel().getValueAt(nI, 5 ).toString());
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setPremiereDate(premiereDate);

                //Preferred Metadata Language
                String preferedMetadataLang = jTable5.getModel().getValueAt(nI, 6 ).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setPreferredMetadataLanguage(preferedMetadataLang);

                //Preferred Metadata Country Code
                String preferedMetadataCC = jTable5.getModel().getValueAt(nI, 7 ).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setPreferredMetadataCountryCode(preferedMetadataCC);
                
                //Critic Rating
                int criticRating = Integer.parseInt(jTable5.getModel().getValueAt(nI, 8 ).toString());
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setCriticRating(criticRating);
                
                //Community Rating
                int communityRating = Integer.parseInt(jTable5.getModel().getValueAt(nI, 9 ).toString());
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setCommunityRating(communityRating);
                
                //Oficial Rating
                String oficialRating = jTable5.getModel().getValueAt(nI, 10 ).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setOfficialRating(oficialRating);
                
                //Custom Rating
                String customRating = jTable5.getModel().getValueAt(nI, 11 ).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setCustomRating(customRating);
                
                //Production Year
                int productionYear = Integer.parseInt(jTable5.getModel().getValueAt(nI, 12 ).toString());
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setProductionYear(productionYear);
                
                //Overview 
                String overview = jTable5.getModel().getValueAt(nI, 14 ).toString();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setOverview(overview);
                
                //1 - Add People
                //1.1 - Clean existing People
                ArrayList<JellyfinPeopleItem> peopleEmpty = new ArrayList();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setPeople(peopleEmpty);

                //1.2 - Add all people present in People Grid
                ArrayList<JellyfinPeopleItem> newGroupPeople = new ArrayList();        
                for (int nJ = 0; nJ < jTable6.getModel().getRowCount(); nJ++){
                    JellyfinPeopleItem newPeople = new JellyfinPeopleItem();
                    newPeople.setId(jTable6.getModel().getValueAt(nJ, 0).toString());
                    newPeople.setName(jTable6.getModel().getValueAt(nJ, 1).toString());
                    newPeople.setType(jTable6.getModel().getValueAt(nJ, 2).toString());
                    newPeople.setRole(jTable6.getModel().getValueAt(nJ, 3).toString());

                    newGroupPeople.add(newPeople);

                }
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setPeople(newGroupPeople);

                //2 - Add Genres
                //2.1 - Clean existing Genres
                ArrayList<JellyfinGenreItem> genreEmpty = new ArrayList();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setGenreItems(genreEmpty);
                
                //2.2 - Add all Genres present in Genres Grid
                ArrayList<JellyfinGenreItem> newGenres = new ArrayList();        
                for (int nJ = 0; nJ < jTable7.getModel().getRowCount(); nJ++){
                    JellyfinGenreItem newGenre = new JellyfinGenreItem();
                    newGenre.setId(jTable7.getModel().getValueAt(nJ, 0).toString());
                    newGenre.setName(jTable7.getModel().getValueAt(nJ, 1).toString());            
                    newGenres.add(newGenre);            
                }
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setGenreItems(newGenres);

                
                //3 - Add Studios
                //3.1 - Clean existing Studios
                ArrayList<JellyfinStudioItem> studiosEmpty = new ArrayList();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setStudios(studiosEmpty);

                //3.2 - Add all Studios present in Studios Grid
                ArrayList<JellyfinStudioItem> newStudios = new ArrayList();        
                for (int nJ = 0; nJ < jTable8.getModel().getRowCount(); nJ++){
                    JellyfinStudioItem newStudio = new JellyfinStudioItem();
                    newStudio.setId(jTable8.getModel().getValueAt(nJ, 0).toString());
                    newStudio.setName(jTable8.getModel().getValueAt(nJ, 1).toString());            
                    newStudios.add(newStudio);            
                }
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setStudios(newStudios);
                
                
                //4 - Add Tags
                //4.1 - Clean existing Tags
                ArrayList<String> emptyTags = new ArrayList();
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setTags(emptyTags);
                
                //4.2 - Add all Tags present in Tags Grid
                ArrayList<String> newTags = new ArrayList();        
                for (int nJ = 0; nJ < jTable9.getModel().getRowCount(); nJ++){
                    String newTag = jTable9.getModel().getValueAt(nJ, 0).toString();  
                    newTags.add(newTag);
                }
                instanceData.getFolders().getItems().get(nIndex).getFolderContent().getItems().get(nI).getItemMetadata().setTags(newTags);
                
            }
            
        }
        
        
    }

    /**
     * This method is used to replace the items content from a specific folder.
     * It retrieves the data from the GUI and updates the instance object accordingly.
     * 
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     * @see TransformDateFormat#getFullDateFromSimple(String)
     * @see DefaultTableModel
     */
    private void replaceItensContentFromFolder() throws java.text.ParseException {
        int nCount = 0;
        String newTitle = new String();        
        int nSize = jTable5.getModel().getRowCount();
        TransformDateFormat transforDate = new TransformDateFormat();
         
        //For each item present in Content Grid, update some fields from Folder Tab
        for (int nI = 0;nI < nSize; nI++){
            
            //Name
            String cName = this.completeEpisodeName(jTextField2.getText(),nI);
            jTable5.getModel().setValueAt(cName, nI, 1);
            
            //Original Title
            String cOriginalTitle = this.completeEpisodeName(jTextField7.getText(),nI);
            jTable5.getModel().setValueAt(cOriginalTitle, nI, 2);
            
            //Sort Name
            String cSortName =  this.completeEpisodeName(jTextField6.getText(),nI);
            jTable5.getModel().setValueAt(cSortName, nI, 3);

            //Created Date
            String createdDate = jTextField3.getText();
            jTable5.getModel().setValueAt(createdDate, nI, 4);
                
            //Premiere Date
            jTable5.getModel().setValueAt(createdDate,nI, 5 );      
            
            //Preferred Metadata Language
            String preferedMetadataLang = "pt-br";
            jTable5.getModel().setValueAt(preferedMetadataLang, nI, 6 );
            
            //Preferred Metadata Country Code
            String preferedMetadataCC = "BR";
            jTable5.getModel().setValueAt(preferedMetadataCC, nI, 7 );
                
            //Critic Rating
            int criticRating = 10;
            jTable5.getModel().setValueAt(criticRating, nI, 8 );
                
            //Community Rating
            int communityRating = 10;
            jTable5.getModel().setValueAt(communityRating, nI, 9 );
                
            //Oficial Rating
            String oficialRating = jComboBox2.getSelectedItem().toString();
            jTable5.getModel().setValueAt(oficialRating, nI, 10 );
                
            //Custom Rating
            String customRating = jComboBox1.getSelectedItem().toString();
            jTable5.getModel().setValueAt(customRating, nI, 11 );
                
            //Production Year
            int productionYear = Integer.parseInt(jTextField8.getText().trim().substring(6,10));
            jTable5.getModel().setValueAt(productionYear, nI, 12 );
            
            //Overview 
            String overview = jTextArea1.getText();
            jTable5.getModel().setValueAt(overview, nI, 14 );
            
            //1 - Add People
            DefaultTableModel modelPeople = (DefaultTableModel) jTable1.getModel();
            jTable6.setModel(modelPeople);
            this.resizeTableWidthColumns(jTable6);
    
            //2 - Add Genres
            DefaultTableModel modelGenres = (DefaultTableModel) jTable2.getModel();
            jTable7.setModel(modelGenres);
            this.resizeTableWidthColumns(jTable7);
                
            //3 - Add Studios
            DefaultTableModel modelStudios = (DefaultTableModel) jTable3.getModel();
            jTable8.setModel(modelStudios);
            this.resizeTableWidthColumns(jTable8);
            
            //4 - Add Tags
            DefaultTableModel modelTags = (DefaultTableModel) jTable4.getModel();
            jTable9.setModel(modelTags);
            this.resizeTableWidthColumns(jTable9);            

        }
    }

    /**
     * This method is used to complete the episode name with the episode number.
     * 
     * @param text The base name of the episode.
     * @param nJ The index of the episode.
     * @return The complete name of the episode.
     * @author Cesar Bianchi
     * @since 1.0
     */
    private String completeEpisodeName(String text, int nJ) {
        
        int nI = nJ+1;
        
        String episodeNumber = Integer.toString(nI);        
        if (episodeNumber.length()<= 1){
            episodeNumber = "0".concat(episodeNumber);
        }
        
        String episodeName = text.concat(" - EP".concat(episodeNumber));
        
        return episodeName;
    }

    /**
     * This method is used to check if all mandatory fields are filled.
     * 
     * @return A boolean indicating whether all mandatory fields are filled.
     * @throws java.text.ParseException If parsing the date fails.
     * @author Cesar Bianchi
     * @since 1.0
     * @see JOptionPane#showMessageDialog(Component, Object, String, int, Icon)
     */
    private boolean checkAllMandatoryFieldsIsOk() {
        boolean lret = true;
        String mandatoryFieldsMsg = new String();
        
        if (jTextField2.getText().isEmpty()){
            mandatoryFieldsMsg = "The 'Title' field is mandatory. Please, make sure it is filled out!";
            lret = false;
        } else if (jTextField6.getText().isEmpty()){
            mandatoryFieldsMsg = "The 'Sort Name' field is mandatory. Please, make sure it is filled out!";
            lret = false;    
        } else if (jTextField7.getText().isEmpty()){
            mandatoryFieldsMsg = "The 'Forced Sort Name' field is mandatory. Please, make sure it is filled out!";
            lret = false;    
        } else if (jTextField3.getText().isEmpty()) {
            mandatoryFieldsMsg = "The 'Created Date' field is mandatory. Please, make sure it is filled out!";
            lret = false;    
        } else if (jTextField8.getText().isEmpty()) {
            mandatoryFieldsMsg = "The 'Premiere Date' field is mandatory. Please, make sure it is filled out!";
            lret = false; 
        } else {
            lret = true;
        }
        
        if (!lret){                        
            ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/images/jellyfinIconTransparency_small.png"));
            JOptionPane.showMessageDialog(null, mandatoryFieldsMsg,"Pay Attention!!",JOptionPane.WARNING_MESSAGE,icon);
        }
        
        return lret;
    }
    
    /**
     * Reloads the folder items displayed in the MainWindow.
     *
     * This method clears the current list of folder items, then reloads them by calling the loadFolders method. If an error occurs while loading the folders, it is logged and the method exits.
     *
     * @throws IOException If an I/O error occurs. This can happen if there's a problem with the network connection, the server, or the local machine.
     * @throws ParseException If there is an error parsing the server's response. This can happen if the server's response does not match the expected format.
     * @since 1.1
     * @author Cesar Bianchi
     */
    public void reloadFolderItems(){
        //Reload Folders and Itens button        
        try {
            modelList = new DefaultListModel<>();
            this.loadFolders();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Searches for a folder item in the MainWindow.
     *
     * This method prompts the user to enter the name of the folder item to search for. It then searches the list of folder items for an item that contains the entered name. If an item is found, it is selected in the list and a message is displayed to the user. If no item is found, a message is displayed to the user.
     *
     * @since 1.1
     * @author Cesar Bianchi
     */
    private void searchFolderItem() {
        String itemName = javax.swing.JOptionPane.showInputDialog("Please, type the folder name to search");
        String foundItemName = new String();
        boolean found = false;
        int foundIndex = 0;
        if (itemName != null && !itemName.isEmpty()){
            
            for (int nI = 0; nI < modelList.size(); nI++){
                
                if (modelList.getElementAt(nI).toUpperCase().contains(itemName.toUpperCase())){
                    found = true;
                    foundIndex = nI;
                    foundItemName = modelList.getElementAt(nI);                    
                    break;
                }
            }
            
            if (found){
                javax.swing.JOptionPane.showMessageDialog(rootPane,"Found the item: ".concat(foundItemName), "Item Found!", JOptionPane.INFORMATION_MESSAGE);
                jList2.setSelectedIndex(foundIndex);
            } else {
                javax.swing.JOptionPane.showMessageDialog(rootPane,"There's no folders with the name: ".concat(itemName), "No items found!", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }
    
}
